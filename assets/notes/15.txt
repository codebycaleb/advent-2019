================================================================
============================MY NOTES============================
================================================================

This is the first Intcode problem that hasn't explicitly said you should run the Intcode program in the final prompt, so I'm choosing to skip actually running the Intcode program! :D

I've taken the original input and mapped some of the variable addresses to try and grok what's going on in this code (see 15-1.txt) The pseudocode I interpreted is found lower in this note. It's a little rough around the edges! I pretty much stopped when I spotted the patterns I needed for part 1.

All of the variable names were assigned in the order they were encountered. It'd probably be more helpful to assign them real names after I understood their value, but I was too lazy.

So what do we have? It's a 40x40 maze! The oxygen tank is located at 33, 35. We check for it after each move; if the droid is there, we output 2.

It took me a *long* time to realize that I and E are basically MOD(X, 2) == 1 and MOD(Y, 2) == 1. Basically, you have to take 2 steps in any direction before making a turn. This ensures that there's never a "hall" with 2 spaces next to each other. For example, starting at S and ending at E via R,D,L will never be possible as it would mean the "hall" is 2 spaces wide:

S>
Ev

However, the following is possible (R,R,D,D,L,L):

S>>
##v
E<v

See 15-2.png for a visualization of my map (maze starts at green point). At any given point, all steps are taken 2 at a time. That's the whole point of E and I.

So, what does my maze look like? Well, here's a the data table I was given (index 0252 - 1031 inclusive):


      0      1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31      32      33      34      35      36      37      38
    --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 0 | 33      14      68      54      69      24      9       59      2       7       68      23      97      53      74      21      32      37      55      83      3       26      85      52      38      10      81      19      82      47      70      27      60      32      98      40      46      75      17
 1 | 66      11      92      30      84      90      36      71      6       82      95      45      23      75      49      38      71      72      2       72      26      64      93      53      68      90      42      3       64      3       66      21      84      47      15      87      60      18      96
 2 | 30      14      54      99      48      12      63      62      86      41      56      79      50      99      38      68      16      15      69      53      90      59      28      41      7       94      47      74      68      56      43      70      22      55      72      87      28      50      28
 3 | 55      98      97      22      64      63      21      28      8       87      91      39      1       93      52      95      96      68      13      24      64      14      65      78      89      34      85      92      35      57      83      70      21      75      43      24      76      74      11
 4 | 90      55      74      22      63      9       95      64      79      2       78      30      74      75      33      23      47      93      93      56      77      48      72      35      42      82      36      25      20      81      15      56      95      96      33      94      53      46      64
 5 | 31      46      98      43      40      98      48      6       71      44      83      7       56      64      92      72      24      29      35      37      22      63      21      28      68      75      31      77      28      96      71      35      11      66      55      87      17      64      5
 6 | 53      95      79      52      95      16      78      80      47      51      90      68      63      1       10      99      79      80      30      97      32      82      27      62      49      1       61      93      71      7       39      93      40      75      50      94      68      22      3
 7 | 44      5       93      55      53      92      92      16      30      94      17      15      77      55      76      25      97      53      73      96      54      98      39      73      75      5       56      78      81      48      64      73      97      25      71      91      28      56      90
 8 | 53      75      28      79      63      35      48      81      8       28      95      73      52      30      29      88      4       94      2       36      92      86      87      9       34      92      98      30      99      40      37      87      36      49      34      99      72      38      54
 9 | 71      1       74      41      20      72      40      90      89      6       1       74      50      63      47      98      79      45      90      78      34      10      78      2       72      94      56      30      86      45      82      74      51      73      88      36      65      30      63
10 | 8       17      68      92      13      93      3       77      72      20      90      63      37      86      77      17      95      56      57      61      77      74      19      18      70      34      93      23      96      8       93      1       79      81      66      27      38      2       12
11 | 31      81      43      48      93      67      60      17      93      44      99      39      72      35      92      99      42      46      79      60      22      56      75      60      95      23      84      33      67      16      16      36      55      39      83      46      75      80      79
12 | 2       63      25      60      20      4       39      97      20      90      4       30      86      9       7       90      80      49      20      98      29      83      51      46      92      27      65      34      57      61      10      94      84      90      3       51      64      5       37
13 | 19      51      69      73      39      96      99      24      34      66      21      76      81      33      85      14      67      54      29      94      17      85      8       88      42      6       89      83      9       52      81      90      11      38      95      20      93      81      20
14 | 20      86      6       36      69      77      25      15      91      78      32      80      3       22      11      90      89      6       11      73      1       82      46      77      99      26      41      2       75      92      52      13      80      96      44      38      98      47      96
15 | 87      28      65      77      17      48      93      93      46      8       82      86      26      84      64      38      53      83      67      97      30      64      39      53      31      63      60      11      86      81      22      84      13      89      75      2       77      5       31
16 | 69      3       8       75      60      13      14      90      66      28      66      18      85      70      51      82      94      28      29      99      35      71      75      80      1       93      14      13      91      14      83      24      77      32      8       48      85      96      31
17 | 6       54      70      95      32      35      66      80      88      3       96      35      80      54      8       70      30      2       18      59      81      27      31      85      73      35      79      68      30      14      21      67      74      57      60      98      44      46      24
18 | 12      60      31      39      68      79      50      3       61      40      75      54      25      85      6       93      56      86      74      98      10      15      66      68      13      44      26      98      40      79      80      14      14      86      30      5       74      66      46
19 | 96      17      83      6       98      16      67      91      90      56      97      1       68      14      85      93      69      56      88      40      79      29      91      25      68      69      74      48      66      73      76      17      61      31      62      90      84      46      89

You can calculate movements manually from the above data, but it's *rough*. For a quick demonstration, the maze starts at row 10, column 20. A look at that point (77) and it's surrounding values:

78 34 10
61 77 74
60 22 56

Movements are determined by comparing values to 58. If the value on the left (61) is less than 58, we can move left. Keep in mind that we'd move left twice per the first point. So we'll always be operating based on an "even" column number. In this case, 61 is > 58, so we can't move left. We apply the same logic for moving right. If the value on the right (74) is less than 58, we can move right.

However, left and right are the "easy" ones. What about down? Well, that's based on the value we're at right now (77). It's not less than 58, so we can't go down either. That only leaves up! For moving up, we check the value above us (34). This means we're good! In the maze, you would move two spaces upward. However, in the data table, we only move up 1 value.

Here's a visual look at how the maze ends up (S is start, O is oxygen tank):

             1111111111222222222233333333334
   01234567890123456789012345678901234567890
 0 #########################################
 1 #       #           #                 # #
 2 # ##### # ####### # # ### ########### # #
 3 #     # # #   #   # # #   #         #   #
 4 ####### # ### # ### # ##### ####### #####
 5 #   #   #   # # #     #   # #   #   #   #
 6 # # # ##### # # # ##### # # ### # ### # #
 7 # #   #   #   # # #     #   #   # #   # #
 8 # ##### # ### # ### ######### ### # ### #
 9 #       #     #   #       #   #   # #   #
10 ############### # ####### # # # ### # # #
11 #     #       # #     #   # # #   # # # #
12 # ### # ##### ### # # # ### # ### # # # #
13 # #     #   #   # # # # #   #   # # #   #
14 # ####### ##### ### # # # ##### # # ### #
15 #     #   #         # # #   #   #   #   #
16 # ### ### # ######### # ### ######### ###
17 # # #   #   #   # #   #   #     #   #   #
18 # # ### # ### # # # ##### ##### # # ### #
19 #     # #   # # #   #     #     # #     #
20 ##### # ### # # ##### ##### ##### #######
21 #   # # #   # #     #S#           #     #
22 # ### # ##### ##### ### ############# # #
23 # #   #         #   #   #             # #
24 # # ############# ### ######### # #######
25 # # #   # #     #   # #       # # #     #
26 # # # # # # ### ### # # ##### # ### ### #
27 #   # #   # #       # # #   #   #     # #
28 # ### ### # ####### # # # ### ### ##### #
29 # #   #   # #   #   # # #     #   #     #
30 # # ### ### # # ### # # ### ### ### #####
31 #   #   #   # #   # # #   #   # # #     #
32 ##### ### ### ### ### # # ##### # ##### #
33 #   #   #     # #   # # # #           # #
34 ### ### ####### ### # ### # ####### ### #
35 #   #   #       #   #   #   #   #O  #   #
36 # ### ######### # # ### ##### # ##### # #
37 # #   #       # # # #   #   # #   #   # #
38 # # ### ##### # # ### ### # # ### # ### #
39 #       #       #         #   #     #   #
40 #########################################

The above is 41x41, but the whole thing is wrapped in a wall, so the usable space ends up being 39x39.

In my actual program, I mapped the data so the odd columns are used for left, right checks (e.g. in the example above, 61 and 74 are checked to determine if I can move left or right). It changes the coordinate system a bit (instead of starting at [20, 10], we start at [10, 10]). This cuts the maze size down from 40x40 to 20x20 (we'll only move once per spot instead of twice).

================================================================
===========================PSEUDOCODE===========================
================================================================
# "CONSTANTS"
C = 21 # X [moves -1 for input 3, +1 for input 4]
G = 21 # Y [moves -1 for input 1, +1 for input 2]

# VARIABLES (INITIAL VALUES)
K = 10 # FLOOR(Y / 2)
E = 1  # MOD(X, 2)
I = 1  # MOD(Y, 2)
M = 0  # MOVED? 0 = no, 1 = yes, 2 = oxygen tank

# TEMPORARY VARIABLES
D # ALIAS FOR C
H # ALIAS FOR G
L # ALIAS FOR K
F # ALIAS FOR E
J # ALIAS FOR I

@START # 0000
A = INPUT
SAVE (A == 1) TO B
IF (A == 1): # JUMP TO 0031
  D = C
  F = E
  H = G - 1 # MOVING UP
  J = (I == 0) # J = FLIP I
  B = -1 * J # B = -1 IF I == 0, ELSE 0
  L = K + B # OR, IN OTHER WORDS, IF I == 0, DECREMENT L (AND LATER, K)
  JUMP @BOUND CHECK / WIN CHECK
IF (A == 2): # JUMP TO 0058
  D = C
  F = E
  H = G + 1 # MOVING DOWN
  J = (I == 0) # J = FLIP I
  L = K + I # OR, IN OTHER WORDS, IF I == 1, INCREMENT L (AND LATER, K)
  JUMP @BOUND CHECK / WIN CHECK
IF (A == 3): # JUMP TO 0081
  D = C - 1 # MOVING LEFT
  F = (E == 0) # F = FLIP E
  H = G
  J = I
  L = K
IF (A == 4):
  ...

@BOUNDS CHECK / WIN CHECK # 0124
  IF D == 0 OR H == 0: # JUMP TO 0217; COVERS 0124 (D) AND 0127 (H)
    JUMP @NO MOVEMENT
  B = (D == 40 OR H == 40)
  IF (D == 40 OR H == 40): # JUMP TO 0217
    JUMP @NO MOVEMENT
  B = (D == 33 AND H == 35)
  IF (D != 33 OR H != 35): # JUMP TO 0165
    JUMP @MOVE CHECK
  M = 2 # WE FOUND THE OXYGEN! (WHICH IS AT 33, 35)
  JUMP @FINAL CHECK

@MOVE CHECK # 0165
B = F * J
IF (F == 0 OR J == 0): # JUMP 0179
  JUMP @POINTER CHECK
M = 1 # MOVED!
JUMP @FINAL CHECK

@POINTER CHECK # 0179
B = F + J
IF B == 0: # IF F AND J ARE BOTH 0, NO MOVEMENT
  JUMP @NO MOVEMENT
B = L + J
B = B - 1       # B = L + J - 1
B = B * 39      # B = (L + J - 1) * 39
B = B + D       # B = (L + J - 1) * 39 + D
B = B - 1       # B = (L + J - 1) * 39 + D - 1
[211] = B + 252 # B = ((L + J - 1) * 39 + D - 1) + 252
M = ([((L + J - 1) * 39 + D - 1) + 252] < 58)
JUMP @FINAL CHECK

@NO MOVEMENT # 0217
M = 0
JUMP @FINAL CHECK

@FINAL CHECK # 0224
IF M == 0: # IF WE HAVE NOT MOVED, JUST OUTPUT
  JUMP @OUTPUT
JUMP @UPDATE VARS # IF WE HAVE MOVED, UPDATE VARS THEN OUTPUT

@UPDATE VARS # 0227
C = D
G = H
E = F
I = J
K = L
JUMP @OUTPUT

@OUTPUT # 0247
OUTPUT M
JUMP @START
